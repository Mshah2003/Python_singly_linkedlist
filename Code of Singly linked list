# Code of Singly linked list and its operation

class Node:
    def __init__(self,data):
        self.data = data
        self.next = None

class List:
    def __init__(self):
        self.head = None

    def Traverse(self):
        if self.head is None:
            print("Linked List is empty")
        else:
            a = self.head
            while a is not None:
                print(a.data,end=" ")
                print("->",end=" ")
                a = a.next
            print("None")

    def insert_at_beginning(self,data):
        nb = Node(data)
        nb.next = self.head
        self.head = nb

    def insert_at_end(self,data):
        nb = Node(data)
        t= self.head
        while t.next is not None:
            t = t.next
        t.next = nb

    def insert_anywhere(self,pos,data):
        nb = Node(data)
        a= self.head
        for i in range(1,pos-1):
            a = a.next
        nb.next = a.next
        a.next = nb

    def delete_at_beginning(self):
        a = self.head
        self.head = a.next
        a.next = None

    def delete_at_end(self):
        a = self.head
        while a.next.next is not None:
            a = a.next
        a.next = None


    def delete_at_position(self,pos):
        a = self.head
        for i in range(1,pos-1):
            a = a.next
        a.next = a.next.next


sll = List()
n1 = Node(5)
sll.head = n1
n2 = Node(10)
n1.next = n2
n3 = Node(15)
n2.next = n3
n4 = Node(20)
n3.next = n4

sll.insert_at_beginning(14)
sll.insert_at_end(14)
sll.insert_anywhere(4,15)
sll.delete_at_beginning()
sll.delete_at_end()
sll.delete_at_position(4)
sll.Traverse()
